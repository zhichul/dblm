import unittest
from dblm.rva.discrete import independent

from dblm.utils import seeding
import numpy as np

class TestIndependent(unittest.TestCase):

    def setUp(self) -> None:
        self.independent = independent.Independent(
            nvars=3,
            nvals=np.array([2,3,4]),
            dists=[np.array([0.2,0.8]), np.array([0.3,0.1,0.6]), np.array([0.1,0.8,0.07,0.03])]
        )

    def test_independent(self):
        seeding.seed(42)
        np.testing.assert_allclose(np.array([0.2,0.8,0.3,0.1,0.6,0.1,0.8,0.07,0.03]), np.exp(self.independent.log_marginals()))
        np.testing.assert_allclose(np.array([[1.0,0,0.3,0.1,0.6,0.1,0.8,0.07,0.03],
                                             [0,1.0,0.3,0.1,0.6,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,1.0,0,0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0,1.0,0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0,0,1.0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0.3,0.1,0.6,1.0,0,0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,1.0,0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,0,1.0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,0,0,1.0]
                                             ]), np.exp(self.independent.log_marginals_conditioned_on_one()))
        np.testing.assert_allclose(np.array([[1.0,0,0.3,0.1,0.6,0.1,0.8,0.07,0.03],
                                             [0,0,0,0,0,0,0,0,0],
                                             [0.2,0.8,1.0,0,0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0,1.0,0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0,0,1.0,0.1,0.8,0.07,0.03],
                                             [0.2,0.8,0.3,0.1,0.6,1.0,0,0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,1.0,0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,0,1.0,0],
                                             [0.2,0.8,0.3,0.1,0.6,0,0,0,1.0]
                                             ]), np.exp(self.independent.log_marginals_conditioned_on_two()[0]))
        lp, ass = self.independent.log_probability_table()
        np.testing.assert_allclose(np.log(np.array([0.006, 0.048, 0.004200000000000001, 0.0018, 0.0020000000000000005, 0.016000000000000004, 0.0014000000000000004, 0.0006000000000000001, 0.012, 0.096, 0.008400000000000001, 0.0036, 0.024, 0.192, 0.016800000000000002, 0.0072, 0.008000000000000002, 0.06400000000000002, 0.005600000000000002, 0.0024000000000000002, 0.048, 0.384, 0.033600000000000005, 0.0144])),
                                   lp)
        np.testing.assert_equal(
            np.array([
                [1,0,1,0,0,1,0,0,0],
                [1,0,1,0,0,0,1,0,0],
                [1,0,1,0,0,0,0,1,0],
                [1,0,1,0,0,0,0,0,1],
                [1,0,0,1,0,1,0,0,0],
                [1,0,0,1,0,0,1,0,0],
                [1,0,0,1,0,0,0,1,0],
                [1,0,0,1,0,0,0,0,1],
                [1,0,0,0,1,1,0,0,0],
                [1,0,0,0,1,0,1,0,0],
                [1,0,0,0,1,0,0,1,0],
                [1,0,0,0,1,0,0,0,1],
                [0,1,1,0,0,1,0,0,0],
                [0,1,1,0,0,0,1,0,0],
                [0,1,1,0,0,0,0,1,0],
                [0,1,1,0,0,0,0,0,1],
                [0,1,0,1,0,1,0,0,0],
                [0,1,0,1,0,0,1,0,0],
                [0,1,0,1,0,0,0,1,0],
                [0,1,0,1,0,0,0,0,1],
                [0,1,0,0,1,1,0,0,0],
                [0,1,0,0,1,0,1,0,0],
                [0,1,0,0,1,0,0,1,0],
                [0,1,0,0,1,0,0,0,1],
            ])
            ,ass
        )

if __name__ == "__main__":
    unittest.main()
    # a = TestIndependent()
    # a.setUp()
    # a.test_independent()



